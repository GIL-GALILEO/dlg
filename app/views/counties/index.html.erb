<% content_for(:page_title) { t('titles.counties') } %>
<% content_for :head do %>
  <style type="text/css">
    .info {
      padding: 10px;
      font: 14px/16px Arial, Helvetica, sans-serif;
      background: white;
      background: rgba(255,255,255,0.8);
      box-shadow: 0 0 15px rgba(0,0,0,0.2);
      border-radius: 5px;
    }
    .county-name {
      font: 22px Arial, Helvetica, sans-serif;
      padding-bottom: 10px;
    }
    .info h4 {
      margin: 0 0 5px;
      color: #777;
    }
    .legend {
      padding: 10px;
      line-height: 19px;
      color: #555;
    }
    .legend i {
      width: 18px;
      height: 18px;
      float: left;
      margin-right: 8px;
      opacity: 0.7;
    }
  </style>
<% end %>

<section id="counties">
  <div class="container">
    <div class="row">
      <div class="col-md-12">
        <h2><%= t('counties.heading') %></h2>
        <div class="text-center">
          <a href="#counties-list" data-turbolinks="false"><%= t('counties.go_to_list') %></a>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-md-12">
        <div id="counties-map"></div>
      </div>
    </div>
    <br>
    <div class="row">
      <div class="col-md-12">
        <a name="counties-list"></a>
        <div class="text-center sort-buttons">
          <%= render partial: 'shared/facet_sort_group', locals: { p: primary_sort_param } %>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-md-12">
        <ul class="counties-list list-group">
          <% @counties.each do |county| %>
            <%= render 'county', county: county %>
          <% end %>
        </ul>
      </div>
    </div>
  </div>
</section>

<script type="text/javascript">
    var layer_map = {};
    var map, geojson, tiles, labelsLayer, mapLabels;

    var $countyListDivs = $('.county-pane');

    $countyListDivs.mouseover(function() {
        var highlightLayer = geojson._layers[layer_map[this.className.replace('list-group-item county-pane pane-', '')]];
        highlightFeature({target: highlightLayer});
        selectFeature({target: highlightLayer})
    });

    $countyListDivs.mouseout(function() {
        var highlightLayer = geojson._layers[layer_map[this.className.replace('list-group-item county-pane pane-', '')]];
        resetHighlight({target: highlightLayer});
        resetInfo();
    });

    var counties = <%= raw @counties.map { |c| c.geo_hash.to_json } %>;
    var counties_geojson = counties.map(JSON.parse);

    map = L.map('counties-map', {
        scrollWheelZoom: false,
        center: [32.46, -83.19],
        zoom: 7
    });

    // intutive handling of mousewheel zooming
    map.on('focus', function() { map.scrollWheelZoom.enable(); });
    map.on('blur', function() { map.scrollWheelZoom.disable(); });

    labelsLayer = map.createPane('labels');
    labelsLayer.style.zIndex = 650;
    labelsLayer.style.pointerEvents = 'none';

    var info = L.control({position: 'bottomleft'});
    var legend = L.control({position: 'bottomright'});

    info.onAdd = function (map) {
        this._div = L.DomUtil.create('div', 'info');
        this.update();
        return this._div
    };

    legend.onAdd = function (map) {
        var div = L.DomUtil.create('div', 'info legend'),
            grades = [0, 1000, 10000];
        div.innerHTML += '<p id="legend-label"><%= t('counties.map.legend') %></p>';
        for (var i = 0; i < grades.length; i++) {
            div.innerHTML +=
                '<i style="background:' + getColor(grades[i] + 1) + '"></i> ' +
                grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
        }
        return div
    };

    info.update = function (props) {
        if (props) {
            this._div.innerHTML = '<div class="county-name">' +
                props.name + ' <%= t('counties.map.county') %></div><br /><span class="badge">' + props.count +
                '</span> <%= t('counties.map.unit') %><br /><br /><a href="' + props.href +
                '" class="btn btn-default"><%= t('counties.map.bl_link') %>' + props.name + ' <%= t('counties.map.county') %></a>'
        } else {
            this._div.innerHTML = '<%= t('counties.map.info_default') %>'
        }
    };

    info.addTo(map);
    legend.addTo(map);

    tiles = L.tileLayer(
        'http://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png',
        {
            id: 'osm.default',
            attribution: '©OpenStreetMap, ©CartoDB'
        }
    ).addTo(map);

    mapLabels = L.tileLayer('http://{s}.basemaps.cartocdn.com/light_only_labels/{z}/{x}/{y}.png', {
        attribution: '©OpenStreetMap, ©CartoDB',
        pane: 'labels'
    }).addTo(map);

    geojson = L.geoJSON(counties_geojson, {
        style: style,
        onEachFeature: onEachFeature
    }).addTo(map);

    function getColor(d) {
        return  d > 10000 ? '#913a00' :
                d > 1000  ? '#c08360' :
                            '#e5d7cc';
    }

    function style(feature) {
        var countyPolyClass = feature.properties.name.toLowerCase().replace(' ', '-');
        return {
            fillColor: getColor(feature.properties.count),
            weight: 2,
            opacity: 1,
            color: 'white',
            dashArray: '3',
            fillOpacity: 0.8,
            className: 'county-' + countyPolyClass
        }
    }

    function selectFeature(e) {
        var layer = e.target;

        layer.setStyle({
            weight: 5,
            color: '#666',
            dashArray: '',
            fillOpacity: 0.5
        });

        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
            layer.bringToFront();
        }

        info.update(layer.feature.properties);
    }

    function highlightFeature(e) {
        var layer = e.target;

        layer.setStyle({
            weight: 5,
            color: '#666',
            dashArray: '',
            fillOpacity: 0.5
        });

        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
            layer.bringToFront();
        }

        // info.update(layer.feature.properties);
    }

    function resetHighlight(e) {
        geojson.resetStyle(e.target);
        // info.update();
    }

    function resetInfo() {
        info.update();
    }

    function whenClicked(e) {
        window.location.href = this.feature.properties.href;
    }

    function onEachFeature(feature, layer) {
        var countyPolyClass = feature.properties.name.toLowerCase().replace(' ', '-');
        layer_map[countyPolyClass] = L.stamp(layer);
        layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
            click: selectFeature
            // click: whenClicked
        });
    }
</script>